// app/api/chat/route.ts

import { streamText } from 'ai'
import { google } from '@ai-sdk/google'

export async function POST(req: Request) {
  // Extract the `messages` from the body of the request
  const { messages } = await req.json();

  // Get a language model
  const model = google('models/gemini-1.5-flash-latest')

  // Call the language model with the prompt
  const result = await streamText({
    model,
    messages,
    maxTokens: 4096,
    temperature: 0.7,
    topP: 0.4,
  })

  // Respond with a streaming response
  return result.toAIStreamResponse()
}
// app/page.tsx

import Chat from './chat'

export default function Page() {
  return <Chat />
}

// app/chat.tsx

'use client'

import { useChat } from 'ai/react';

export default function Chat() {
   const { messages, input, handleInputChange, handleSubmit } = useChat({
    api: '/api/chat'
  })

  return (
    <div>
      <ul>
        {messages.map((m, index) => (
          <li key={index}>
            {m.role === 'user' ? 'User: ' : 'AI: '}
            {m.content}
          </li>
        ))}
      </ul>
    
      <form onSubmit={handleSubmit}>
        <label>
          Say something...
          <input value={input} onChange={handleInputChange} />
        </label>
        <button type="submit">Send</button>
      </form>
    </div>
  )
}
